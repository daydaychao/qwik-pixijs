{
    "sourceFile": "src/contexts/player.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1695789298795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695789329192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n export default component$(() => {\n   const theme = useSignal('dark');\n   useContextProvider(ThemeContext, theme);\n   return (\n-    <>\n+   \n       <button\n         onClick$={() =>\n           (theme.value = theme.value == 'dark' ? 'light' : 'dark')\n         }\n"
                },
                {
                    "date": 1695789341185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n export default component$(() => {\n   const theme = useSignal('dark');\n   useContextProvider(ThemeContext, theme);\n   return (\n-   \n+    <>\n       <button\n         onClick$={() =>\n-          (theme.value = theme.value == 'dark' ? 'light' : 'dark')\n+        \n         }\n       >\n         Flip\n       </button>\n"
                },
                {
                    "date": 1695789346221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { type Signal, component$, useSignal } from '@builder.io/qwik';\n+import {\n+  useContext,\n+  useContextProvider,\n+  createContextId,\n+} from '@builder.io/qwik';\n+ \n+export const ThemeContext = createContextId<Signal<string>>(\n+  'docs.theme-context'\n+);\n+ \n+export default component$(() => {\n+  const theme = useSignal('dark');\n+  useContextProvider(ThemeContext, theme);\n+  return (\n+    <>\n+      <button\n+        onClick$={() =>   (theme.value = theme.value == 'dark' ? 'light' : 'dark') }\n+      >\n+        Flip\n+      </button>\n+      <Child />\n+    </>\n+  );\n+});\n+ \n+const Child = component$(() => {\n+  const theme = useContext(ThemeContext);\n+  return <div>Theme is {theme.value}</div>;\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695789352426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,41 +14,10 @@\n   useContextProvider(ThemeContext, theme);\n   return (\n     <>\n       <button\n-        onClick$={() =>   (theme.value = theme.value == 'dark' ? 'light' : 'dark') }\n-      >\n-        Flip\n-      </button>\n-      <Child />\n-    </>\n-  );\n-});\n- \n-const Child = component$(() => {\n-  const theme = useContext(ThemeContext);\n-  return <div>Theme is {theme.value}</div>;\n-});\n-import { type Signal, component$, useSignal } from '@builder.io/qwik';\n-import {\n-  useContext,\n-  useContextProvider,\n-  createContextId,\n-} from '@builder.io/qwik';\n- \n-export const ThemeContext = createContextId<Signal<string>>(\n-  'docs.theme-context'\n-);\n- \n-export default component$(() => {\n-  const theme = useSignal('dark');\n-  useContextProvider(ThemeContext, theme);\n-  return (\n-    <>\n-      <button\n         onClick$={() =>\n-        \n-        }\n+          (theme.value = theme.value == 'dark' ? 'light' : 'dark') }\n       >\n         Flip\n       </button>\n       <Child />\n"
                }
            ],
            "date": 1695789298795,
            "name": "Commit-0",
            "content": "import { type Signal, component$, useSignal } from '@builder.io/qwik';\nimport {\n  useContext,\n  useContextProvider,\n  createContextId,\n} from '@builder.io/qwik';\n \nexport const ThemeContext = createContextId<Signal<string>>(\n  'docs.theme-context'\n);\n \nexport default component$(() => {\n  const theme = useSignal('dark');\n  useContextProvider(ThemeContext, theme);\n  return (\n    <>\n      <button\n        onClick$={() =>\n          (theme.value = theme.value == 'dark' ? 'light' : 'dark')\n        }\n      >\n        Flip\n      </button>\n      <Child />\n    </>\n  );\n});\n \nconst Child = component$(() => {\n  const theme = useContext(ThemeContext);\n  return <div>Theme is {theme.value}</div>;\n});"
        }
    ]
}